{"version":3,"sources":["components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","heading","value","onChange","event","target","rows","newText","toUpperCase","toLowerCase","split","join","document","getElementById","select","navigator","clipboard","writeText","alert","filter","element","length","App","setMode","body","style","backgroundColor","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a32723fe.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode} shadow  mb-5 bg-${props.mode} rounded`}>\r\n    <div className=\"container-fluid\">\r\n      <a className=\"navbar-brand\" href=\"/\"> {props.title} </a>\r\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n          \r\n        </ul>\r\n        <div className={`form-check form-switch text-${props.mode==='light' ? 'dark':'light'} mx-4`}>\r\n          <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n          <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable {props.mode==='light' ? 'dark':'light'} Mode</label>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    </nav>\r\n    )\r\n}\r\n\r\n","import React, { useState } from 'react';\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () => {\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n    }\r\n    const handleLowClick = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n    }\r\n    const handleClear = () => {\r\n        let newText = '';\r\n        setText(newText);\r\n    }\r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value)\r\n    }\r\n    const handleCopy = () => {\r\n        var text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        alert(\"Copied to Clipboard\");\r\n    } \r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n    }\r\n\r\n    const [text, setText] = useState('');\r\n    return (\r\n        <>\r\n        <div className=\"container\">\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" id=\"myBox\" value= {text} onChange={handleOnChange} rows=\"8\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleLowClick}>Convert to Lowercase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleClear}>Clear Text</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleCopy}>Copy Text</button>\r\n        </div>\r\n        <div className=\"container my-3\">\r\n            <h2>Your text summary</h2>\r\n            <p>{text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} words and {text.length} characters</p>\r\n            <p>{0.008 *  text.split(\" \").filter((element)=>{return element.length!==0}).length} Minutes read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"Nothing to preview!\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\nimport './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n\n\n\nfunction App() {\n  const [mode, setMode] = useState('dark');\n\n  // Dark mode toggle Function\n  const toggleMode = () => {\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      document.body.style.color = 'white';\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      document.body.style.color = '#212529';\n    }\n  }\n  return (\n    <> \n    <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode}/>\n    <div className=\"container my-3\">\n    <TextForm heading=\"Enter text to Analyze below\" mode={mode}/>\n    </div>\n    \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}